/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var borden = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-79.94202051571382, 44.30106203390822],
          [-79.94202051571382, 44.28828376754687],
          [-79.91936121395601, 44.28828376754687],
          [-79.91936121395601, 44.30106203390822]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%% How to export data from a collection of images? %%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


// First, we need to understand that there are several layers of data in the images.
// If our objective is to export the bands values data, we need to follow some steps to
// send this information to our google drive.

// In this tutorial, I'm going to describe the attempts that I tried and explain why the
// work or not.

// %%%%%%%%%%%%%%%% First attemp: Exporting after filtering bounds %%%%%%%%%%%%%%%%%%%%%%%%%%

// Steps: ----
// 1- Define polygon
// 2- Use Sentinel 2 image collection
// 3- Filter area according to polygon
// 4- Export the collection to google drive


// Why didn't work?: ----
// If we do this, the csv file that is going to be exported it will contain 
// **just the metadata** and not the values of each band.

// Code: -----

// // Create image collection of S-2 imagery
// var s2 = ee.ImageCollection('COPERNICUS/S2_SR')
// // filter start and end date
// //.filterDate('2017-03-28', '2021-11-28')
// // filter according to drawn boundary
// .filterBounds(borden)
// ;

// Export.table.toDrive({
//   collection: s2,
//   description: "test_borden_sentinel_2_level_2a",
//   folder: "08-GEE"
// });

// %%%%%%%%%%%%%%%%%% Second attemp: Exporting a geotiff %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

// Steps: ----
// 1- Select Image to work with
// 2- Get the projection of the image (so it will be included in the Geotiff)
// 3- Define polygon directly (not as an object implicit in the wd)
// 4- Export the image as a GeoTiff

// Why didn't work?: ----
// I haven't review the object in R to check if everything is fine

// Code: -----

// var landsat = ee.Image('LANDSAT/LC08/C01/T1_TOA/LC08_123032_20140515')
//   .select(['B4', 'B3', 'B2']);
  
// var projection = landsat.select('B2').projection().getInfo();

// var kaku_tower = 
//     ee.Geometry.Polygon(
//         [[[-85.62672979936602, 10.848597075504689],
//           [-85.62672979936602, 10.841178872192584],
//           [-85.61231024370196, 10.841178872192584],
//           [-85.61231024370196, 10.848597075504689]]], null, false);
          
// Export.image.toDrive({
//   image: landsat,
//   description: 'test_geotiff_kaku_landsat',
//   folder: "08-GEE",
//   crs: projection.crs,
//   crsTransform: projection.transform,
//   region: kaku_tower,
//   fileFormat: 'GeoTIFF',
//   formatOptions: {
//     cloudOptimized: true
//   }
// });

// %%%%%%%%%%%%%%%%%% Third attemp: Obtain MODIS GPP %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

// Steps: ----
// 1- Define a point in Santa Rosa
// 2- Define image from MODIS GPP product
// 3- Filter by date
// 4- Filter bound by the point defined
// 5- Try to check the values of GPP

// Why didn't work?: ----
// Again, I'm not able to see the values of GPP for the pixels involved in the bounds.
// I'm just obtaining the metadata and the size of the pixel and the posible values
// range for that pixel.
// There is a need to define the values to be able to shown them

// Code: -----

// // Define Principe tower point (This is not a polygon)
// var principe_tower = /* color: #0b4a8b */ee.Geometry.Point([
//                                                             -85.6042203532032, 
//                                                             10.852088350676011]);

// var modis_sr = ee.ImageCollection("UMT/NTSG/v2/MODIS/GPP")
//                     .filter(ee.Filter.date('2013-01-01', '2017-01-31'))
//                     .filterBounds(principe_tower);
// print(modis_sr);

// var gpp = modis_sr.select('GPP');
// print(gpp);

// %%%%%%%%%%%%%%%%%% Fourth attemp: Richard's example to extract bands %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

// Steps: ----
// 1- Define a geometry
// 2- Filter cloudy images
// 3- Clip image
// 4- Map to sample images
// 5- 


// Why didn't work?: ----
// I cannot export a list to drive. It must be a collection. Code will run but
// after a while it will throw an error that says just collections can be exported.

// Code: -----

// var c1 = ee.ImageCollection('COPERNICUS/S2_SR').filterBounds(borden)
//                                                 //.filterDate('2020-05-01','2020-12-31')
//                                               .filterMetadata('CLOUDY_PIXEL_PERCENTAGE','less_than',30)
//                                               .map( function (image) { return image.clip(borden)})
//                                               .map( function (image) { 
//                                                 return image.set('samples', image.sample({
//                                                   region: borden, 
//                                                   scale:10, 
//                                                   geometries:true
//                                                 }));
//                                               });
// // This aggregate creates a list 
// print(c1.aggregate_array('samples'));
// print(c1.aggregate_array('system:time_start'));

// var test_list = c1.aggregate_array('samples');

// Export.table.toDrive({
//   collection: test_list,
//   description: "test_bands"
// });

// %%%%%%%%%%%%%%%%%% Fifth attemp: Richard's loop to extract bands %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

// Steps: ----
// 1- Define a geometry
// 2- Map to clip
// 3- Select bands
// 4- Map to sample images
// 5- 

// Why it worked?: ----
// We are sampling and clipping. This allows us to obtain the values of the pixels bands.

// Code: -----

var borden_bands = ee.ImageCollection('COPERNICUS/S2_SR')
.filterDate('2019-08-01', '2019-08-30')  //filter start and end date
.filterBounds(borden)   //filter according to drawn boundary
.map(function (image) {return (image.clip(borden))})
.select(['AOT', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8',
          'B8A', 'B9', 'B11', 'B12', 'MSK_CLDPRB', 'MSK_SNWPRB', 
          'QA10', 'QA20', 'QA60', 'SCL', 'TCI_B', 'TCI_G', 'TCI_R',
          'WVP'])
.map(function (image) {return (image.sample( { region: borden, scale:10, geometries: true}) )});

// Steps to know the # of elements and pass it to the loop
var borden_list = borden_bands.toList(borden_bands.size());

// Obtain the # of iterations that we need the loop to run for
var n = borden_list.size().getInfo();

for (var i = 0; i < n; i++) {
  var feature_collection = ee.FeatureCollection(borden_list.get(i));
  var id = feature_collection.get("system:index").getInfo();
  Export.table.toDrive({
    collection: feature_collection,
    description: id,
    fileFormat: "CSV",
    fileNamePrefix: id,
    folder: "08-GEE"
  });
}