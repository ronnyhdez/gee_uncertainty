/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var borden = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-79.94202051571382, 44.30106203390822],
          [-79.94202051571382, 44.28828376754687],
          [-79.91936121395601, 44.28828376754687],
          [-79.91936121395601, 44.30106203390822]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%% How to export data from a collection of images? %%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


// First, we need to understand that there are several layers of data in the images.
// If our objective is to export the bands values data, we need to follow some steps to
// send this information to our google drive.

// In this tutorial, I'm going to describe the attempts that I tried and explain why the
// work or not.

// %%%%%%%%%%%%%%%% First attemp: Exporting after filtering bounds %%%%%%%%%%%%%%%%%%%%%%%%%%

// Steps: ----
// 1- Define polygon
// 2- Use Sentinel 2 image collection
// 3- Filter area according to polygon
// 4- Export the collection to google drive


// Why didn't work?: ----
// If we do this, the csv file that is going to be exported it will contain just the
// metadata and not the values of each band.

// Code: -----

// Create image collection of S-2 imagery
var s2 = ee.ImageCollection('COPERNICUS/S2_SR')
// filter start and end date
//.filterDate('2017-03-28', '2021-11-28')
// filter according to drawn boundary
.filterBounds(borden)
;

Export.table.toDrive({
  collection: s2,
  description: "test_borden_sentinel_2_level_2a",
  folder: "08-GEE"
});

// %%%%%%%%%%%%%%%%%% Second attemp: Exporting a geotiff %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

// 


