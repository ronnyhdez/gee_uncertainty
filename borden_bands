/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-79.9475699912385, 44.31059916513732],
          [-79.9475699912385, 44.3082038411823],
          [-79.94336428750314, 44.3082038411823],
          [-79.94336428750314, 44.31059916513732]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Exporting bands data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Steps ------------------------------------------------------------------------------------
// 1- Define an area of at least 3km^2
// 2- For every product, scale at the resolution of the biggest one (band is 30m, scale should be that)
// 3- Obtain pixel centroid with the LAT and LONG
// 4- Obtain band values for every pixel in image
// 5- Export to Google Drive


// Is my geometry large enough?
// The argument inside the `area()` function is:
// The maximum amount of error tolerated when performing any necessary reprojection.
// I tried changing the values to 0.1, 1, 2, 3 and I have always the same value
print('Geometry area definition:', geometry.area(1));

// Print polygon area in square kilometers.
print('Polygon area: ', geometry.area(1).divide(1000 * 1000)); // 0.08913 Km^2


// First we are going to filter according to:
// 1- Geometry
// 2- Date
// 3- Cloud cover less than 30%
// 4- Clip the defined geometry
// 5- Sample image including scale of bigger band that I need

// This is going to return a feature collection
var borden_bands = ee.ImageCollection('COPERNICUS/S2_SR')
.filterBounds(geometry)
// .filterDate('2019-08-01', '2019-08-30') 
// .filterMetadata('CLOUD_COVER', 'less_than', 30)
.map(function (image) {return (image.clip(geometry))})
.map(function (image) {return (image.sample( { region: geometry, scale:20, geometries: true}) )});

// Check what we have as a result:
print('All the var:', borden_bands); // Prints 483 elements
print('The first entry:', borden_bands.first()); // Prints 238 elements that should be from the first entry
print('Using aggregate array with B1:',
      ee.Feature(ee.FeatureCollection(borden_bands.first()).aggregate_array("B1"))); // Returns a list

// Now, every element of the collection as a list
// To make this function work, we need to indicate the number of elements to fetch.
// The number of elements to fetch is the size of the feature collection
// On the first print of the feature collection, we have that it contains 483 elements
// I just need that number to pass it to the function `toList()` I can obtain it with the function `size()`
var borden_size = borden_bands.size();
print('Just the size of the feature collection:', borden_size);

// Let's pass this number to the function `toList()`:
var borden_list = borden_bands.toList(borden_size);
print('Borden elements of the feature collection as a list:', borden_list);

// What information do I have up to this point?
// - I have 483 images (js index goes from 0 to 482)
// - The geometry clipped have around 238 elements (pixels)
print('Check last image in the list:', borden_list.get(482));

// Now, let's try to retrieve one of the properties of the first element on the list
print('Get the system:index property:', ee.FeatureCollection(borden_list.get(0)).get("system:index"));

var n = borden_list.size().getInfo();
print(n);

// Export to Google Drive
// for (var i = 0; i < n; i++) {
//   var feature_collection = ee.FeatureCollection(borden_list.get(i));
//   var id = feature_collection.get("system:index").getInfo();
//   Export.table.toDrive({
//     collection: feature_collection,
//     description: id,
//     fileFormat: "CSV",
//     fileNamePrefix: id,
//     folder: "08-GEE/borden_sentinel"
//   });
// }









// This one exports the collection to Drive, but without the band values. What I obtained it was just the
// "description" of the band (the same result as the list from Richard). Looking for some answers, I read that
// even if it is a point I should apply a reduce function to obtain the mean/median/max/min.

// ############# Test to add date column with human readable format ###############################################

//var convert_to_FC = function(image){
//  var date = image.get('system:time_start');
//  var value = image.reduceRegion({
//    reducer: ee.Reducer.median(), 
//    geometry: geometry, 
//    scale: 100}).get('NDVI');
//  var feature = ee.Feature(null, // geometry
//                            {'system:time_start': date, // properties
//                            'date': ee.Date(date).format('Y/M/d'), 
//                            'ndvi_value': value});
//  return feature;
//};








